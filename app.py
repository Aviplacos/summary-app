import os
import io
import re
import pandas as pd
import pdfplumber
from flask import Flask, request, render_template_string, send_file

app = Flask(__name__)

HTML_TEMPLATE = """
<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 40px; }
    table { border-collapse: collapse; width: 100%; }
    th, td { border: 1px solid #999; padding: 6px; text-align: left; }
    th { background: #eee; }
  </style>
</head>
<body>
  <h2>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</h2>
  <form action="/" method="post" enctype="multipart/form-data">
    –£–ü–î (PDF): <input type="file" name="upd" accept="application/pdf"><br><br>
    –¢–û–†–ì-12 (PDF): <input type="file" name="torg" accept="application/pdf"><br><br>
    <input type="submit" value="–û–±—Ä–∞–±–æ—Ç–∞—Ç—å">
  </form>
  {% if table %}
    <h2>–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤</h2>
    {{ table|safe }}
    <br>
    <a href="/download">üì• –°–∫–∞—á–∞—Ç—å Excel</a>
  {% endif %}
</body>
</html>
"""

summary_df = None


# ---------- helpers ----------

def safe_float(val):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ float."""
    if val is None:
        return None
    if isinstance(val, (int, float)):
        return float(val)
    if isinstance(val, str):
        s = val.replace("\u00A0", " ").replace(" ", "").replace(",", ".")
        try:
            return float(s)
        except Exception:
            return None
    return None


def extract_10_digit_code(cell):
    """–ò–∑–≤–ª–µ–∫–∞–µ–º 10-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã). –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –µ—Å–ª–∏ –Ω–µ 10 —Ü–∏—Ñ—Ä."""
    if cell is None:
        return None
    digits = re.sub(r"\D", "", str(cell))
    return digits if len(digits) == 10 else None


def has_letters(s: str) -> bool:
    """–ï—Å—Ç—å –ª–∏ –±—É–∫–≤—ã (—Ä—É—Å/–ª–∞—Ç) –≤ —Å—Ç—Ä–æ–∫–µ."""
    return bool(re.search(r"[A-Za-z–ê-–Ø–∞-—è–Å—ë]", s or ""))


def get_cell(row, idx):
    return row[idx] if (row is not None and 0 <= idx < len(row)) else None


def cleanup_name(x: str) -> str:
    if not x:
        return ""
    s = str(x).replace("\n", " ").replace("\u00A0", " ")
    s = re.sub(r"\s+", " ", s).strip()
    return s


def is_total_row(name: str) -> bool:
    n = (name or "").lower()
    return any(key in n for key in ["–∏—Ç–æ–≥–æ", "–≤—Å–µ–≥–æ", "—Å—É–º–º–∞", "–∫ –æ–ø–ª–∞—Ç–µ"])


# ---------- parsing ----------

def parse_upd(file):
    """
    –£–ü–î: –±–∞–∑–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–æ–ª–æ–Ω–æ–∫ (–ø–æ —Ç–≤–æ–∏–º RAW):
      name -> col 3, code -> col 4, qty -> col 7, cost -> col 9
    –ï—Å–ª–∏ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –∫–∞–∫–∏—Ö-—Ç–æ –∫–æ–ª–æ–Ω–æ–∫ –Ω–µ—Ç/–ø—É—Å—Ç—ã ‚Äî –ø—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏.
    """
    rows = []
    with pdfplumber.open(file) as pdf:
        for page in pdf.pages:
            table = page.extract_table()
            if not table:
                continue
            for row in table:
                if not row:
                    continue

                # 1) –ö–æ–¥: —Å—Ç—Ä–æ–≥–æ –∏–∑ "—Å–≤–æ–µ–π" –∫–æ–ª–æ–Ω–∫–∏, –∏–Ω–∞—á–µ '‚Äî'
                raw_code_cell = get_cell(row, 4)
                code = extract_10_digit_code(raw_code_cell) or "‚Äî"

                # 2) –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: —Å–Ω–∞—á–∞–ª–∞ –∏–∑ col 3, –∏–Ω–∞—á–µ –∏—â–µ–º –ø–µ—Ä–≤—É—é —è—á–µ–π–∫—É —Å –±—É–∫–≤–∞–º–∏
                name = cleanup_name(get_cell(row, 3))
                if not has_letters(name):
                    # —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫ –∏–º–µ–Ω–∏ –ø–æ —Å—Ç—Ä–æ–∫–µ
                    for i, cell in enumerate(row):
                        cell_str = cleanup_name(cell)
                        if has_letters(cell_str) and len(cell_str) >= 4:
                            name = cell_str
                            break

                # —Ñ–∏–ª—å—Ç—Ä –º—É—Å–æ—Ä–Ω—ã—Ö —Å—Ç—Ä–æ–∫
                if not name or len(name) < 4 or is_total_row(name):
                    continue

                # 3) –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –°—Ç–æ–∏–º–æ—Å—Ç—å:
                #    —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏, –∑–∞—Ç–µ–º ‚Äî —Å–∫–∞–Ω –≤—Å–µ–π —Å—Ç—Ä–æ–∫–∏
                qty = safe_float(get_cell(row, 7))
                cost = safe_float(get_cell(row, 9))

                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, —Å–∫–∞–Ω–∏—Ä—É–µ–º —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —è—á–µ–π–∫—É –∫–æ–¥–∞
                if qty is None or cost is None:
                    numbers = []
                    for i, cell in enumerate(row):
                        if i == 4:  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–ª–æ–Ω–∫—É –∫–æ–¥–∞, —á—Ç–æ–±—ã –Ω–µ –ø–æ–π–º–∞—Ç—å 10-–∑–Ω–∞—á–Ω—ã–π –∫–∞–∫ —á–∏—Å–ª–æ
                            continue
                        num = safe_float(cell)
                        if num is not None:
                            numbers.append((i, num))
                    if numbers:
                        # –ì—Ä—É–±–∞—è, –Ω–æ –ø—Ä–∞–∫—Ç–∏—á–Ω–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞:
                        # - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚Äî –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫–µ,
                        # - —Å—Ç–æ–∏–º–æ—Å—Ç—å ‚Äî –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫–µ.
                        if qty is None:
                            qty = numbers[0][1]
                        if cost is None:
                            cost = numbers[-1][1]

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å qty –∏ cost
                if qty is not None and cost is not None:
                    rows.append([code, name, qty, cost])

    return pd.DataFrame(rows, columns=["–ö–æ–¥ –≤–∏–¥–∞ —Ç–æ–≤–∞—Ä–∞", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ö–æ–ª-–≤–æ", "–°—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)"])


def parse_torg(file):
    """
    –¢–û–†–ì-12: –±–∞–∑–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–ø–æ —Ç–≤–æ–∏–º RAW):
      name -> col 1, mass -> col 9
    –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–∞–∫–∏–µ –∂–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –∏–º–µ–Ω–∏ –∏ –∑–∞—â–∏—Ç–µ –æ—Ç —Ä–∞–∑–º–µ—Ç–∫–∏.
    """
    rows = []
    with pdfplumber.open(file) as pdf:
        for page in pdf.pages:
            table = page.extract_table()
            if not table:
                continue
            for row in table:
                if not row:
                    continue
                name = cleanup_name(get_cell(row, 1))
                if not name or len(name) < 4 or is_total_row(name):
                    continue
                weight = safe_float(get_cell(row, 9))
                if weight is not None:
                    rows.append([name, weight])
    return pd.DataFrame(rows, columns=["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ú–∞—Å—Å–∞ –Ω–µ—Ç—Ç–æ (–∫–≥)"])


def build_summary(upd_df, torg_df):
    # –õ–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ‚Äî –≤—Å—ë –∏–∑ –£–ü–î –æ—Å—Ç–∞—ë—Ç—Å—è
    df = pd.merge(upd_df, torg_df, on="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", how="left")

    # –ù—É–º–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫
    df.insert(0, "‚Ññ", range(1, len(df) + 1))

    # –ò–¢–û–ì–û
    total_mass = df["–ú–∞—Å—Å–∞ –Ω–µ—Ç—Ç–æ (–∫–≥)"].sum(skipna=True)
    total_qty = df["–ö–æ–ª-–≤–æ"].sum(skipna=True)
    total_cost = df["–°—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)"].sum(skipna=True)
    df.loc[len(df)] = ["‚Äî", "–ò–¢–û–ì–û", "-", total_qty, total_cost, total_mass]
    return df


# ---------- web ----------

@app.route("/", methods=["GET", "POST"])
def index():
    global summary_df
    table_html = None
    if request.method == "POST":
        upd_file = request.files.get("upd")
        torg_file = request.files.get("torg")
        if upd_file and torg_file:
            upd_df = parse_upd(upd_file)
            torg_df = parse_torg(torg_file)
            summary_df = build_summary(upd_df, torg_df)
            table_html = summary_df.to_html(index=False, float_format="%.2f")
    return render_template_string(HTML_TEMPLATE, table=table_html)


@app.route("/download")
def download():
    global summary_df
    if summary_df is None or summary_df.empty:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã."
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine="openpyxl") as writer:
        summary_df.to_excel(writer, index=False, sheet_name="–°–≤–æ–¥–Ω–∞—è")
    output.seek(0)
    return send_file(output, download_name="summary.xlsx", as_attachment=True)


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
