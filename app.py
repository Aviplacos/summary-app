import os
import io
import pandas as pd
import pdfplumber
from flask import Flask, request, render_template_string, send_file

app = Flask(__name__)

HTML_TEMPLATE = """
<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 40px; }
    table { border-collapse: collapse; width: 100%; }
    th, td { border: 1px solid #999; padding: 6px; text-align: left; }
    th { background: #eee; }
  </style>
</head>
<body>
  <h2>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</h2>
  <form action="/" method="post" enctype="multipart/form-data">
    –£–ü–î (PDF): <input type="file" name="upd"><br><br>
    –¢–û–†–ì-12 (PDF): <input type="file" name="torg"><br><br>
    <input type="submit" value="–û–±—Ä–∞–±–æ—Ç–∞—Ç—å">
  </form>
  {% if table %}
    <h2>–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤</h2>
    {{ table|safe }}
    <br>
    <a href="/download">üì• –°–∫–∞—á–∞—Ç—å Excel</a>
  {% endif %}
</body>
</html>
"""

summary_df = None


def safe_float(val):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ"""
    if not isinstance(val, str):
        return None
    try:
        return float(val.replace(" ", "").replace(",", "."))
    except:
        return None


def auto_code(name: str) -> str:
    """–ê–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–¥–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    if not name:
        return "‚Äî"
    n = str(name).lower()
    if "–¥–∏–≤–∞–Ω" in n:
        return "9401410000"
    if "—Å—Ç—É–ª" in n:
        return "9401800009"
    if "–ø—É—Ñ" in n or "–±–∞–Ω–∫–µ—Ç–∫–∞" in n:
        return "9401800009"
    return "‚Äî"


def parse_upd(file):
    rows = []
    with pdfplumber.open(file) as pdf:
        for page in pdf.pages:
            table = page.extract_table()
            if not table:
                continue
            for row in table:
                if not row or len(row) < 10:
                    continue
                code = str(row[4]).replace("\n", "").strip() if row[4] else ""
                name = str(row[3]).strip()
                if not code or code == "‚Äî":
                    code = auto_code(name)
                qty = safe_float(row[7])
                cost = safe_float(row[9])
                if name and qty and cost:
                    rows.append([code, name, qty, cost])
    return pd.DataFrame(rows, columns=["–ö–æ–¥ –≤–∏–¥–∞ —Ç–æ–≤–∞—Ä–∞", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ö–æ–ª-–≤–æ", "–°—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)"])


def parse_torg(file):
    rows = []
    with pdfplumber.open(file) as pdf:
        for page in pdf.pages:
            table = page.extract_table()
            if not table:
                continue
            for row in table:
                if not row or len(row) < 10:
                    continue
                name = str(row[1]).strip()
                weight = safe_float(row[9])
                if name and weight:
                    rows.append([name, weight])
    return pd.DataFrame(rows, columns=["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ú–∞—Å—Å–∞ –Ω–µ—Ç—Ç–æ (–∫–≥)"])


def build_summary(upd_df, torg_df):
    df = pd.merge(upd_df, torg_df, on="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", how="left")
    total_mass = df["–ú–∞—Å—Å–∞ –Ω–µ—Ç—Ç–æ (–∫–≥)"].sum(skipna=True)
    total_qty = df["–ö–æ–ª-–≤–æ"].sum(skipna=True)
    total_cost = df["–°—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)"].sum(skipna=True)
    df.loc[len(df)] = ["–ò–¢–û–ì–û", "-", total_qty, total_cost, total_mass]
    return df


@app.route("/", methods=["GET", "POST"])
def index():
    global summary_df
    table_html = None
    if request.method == "POST":
        upd_file = request.files.get("upd")
        torg_file = request.files.get("torg")
        if upd_file and torg_file:
            upd_df = parse_upd(upd_file)
            torg_df = parse_torg(torg_file)
            summary_df = build_summary(upd_df, torg_df)
            table_html = summary_df.to_html(index=False, float_format="%.2f")
    return render_template_string(HTML_TEMPLATE, table=table_html)


@app.route("/download")
def download():
    global summary_df
    if summary_df is None or summary_df.empty:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã."
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine="openpyxl") as writer:
        summary_df.to_excel(writer, index=False, sheet_name="–°–≤–æ–¥–Ω–∞—è")
    output.seek(0)
    return send_file(output, download_name="summary.xlsx", as_attachment=True)


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
