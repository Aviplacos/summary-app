import pandas as pd
import re
from flask import Flask, request, send_file, render_template_string
from io import BytesIO

app = Flask(__name__)

# –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
last_summary = None

# === HTML —Ñ–æ—Ä–º–∞ ===
UPLOAD_FORM = """
<!doctype html>
<html lang="ru">
<head>
  <meta charset="utf-8">
  <title>–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body class="p-4">
  <div class="container">
    <h2 class="mb-4">–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–≤–∞ Excel —Ñ–∞–π–ª–∞</h2>
    <form method=post enctype=multipart/form-data class="mb-3">
      <div class="mb-3">
        <label class="form-label">–°—á–µ—Ç</label>
        <input type=file name=invoice class="form-control">
      </div>
      <div class="mb-3">
        <label class="form-label">–ù–∞–∫–ª–∞–¥–Ω–∞—è</label>
        <input type=file name=waybill class="form-control">
      </div>
      <button type="submit" class="btn btn-primary">–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É</button>
    </form>
  </div>
</body>
</html>
"""

def extract_tnved(text):
    match = re.search(r"\b\d{10}\b", str(text))
    return match.group(0) if match else None

def make_summary(invoice_file, waybill_file):
    # —á–∏—Ç–∞–µ–º —Å—á–µ—Ç: –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–≤—ã–µ 8 —Å—Ç—Ä–æ–∫ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 11
    df_invoice = pd.read_excel(invoice_file, skiprows=8, skipfooter=11, engine="openpyxl")
    # –Ω–∞–∫–ª–∞–¥–Ω–∞—è: —Ç–æ–ª—å–∫–æ –ø—Ä–æ–ø—É—Å–∫ –ø–µ—Ä–≤—ã—Ö 8 —Å—Ç—Ä–æ–∫
    df_waybill = pd.read_excel(waybill_file, skiprows=8)

    # --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—á–µ—Ç–∞ ---
    invoice_data = []

    for _, row in df_invoice.iterrows():
        line = " ".join(str(v) for v in row if pd.notna(v))
        tnved = extract_tnved(line)  # –º–æ–∂–µ—Ç –±—ã—Ç—å None
        parts = line.split(tnved) if tnved else [line]
        name = parts[0].strip().split(maxsplit=1)[-1] if parts[0].strip() else ""

        # --- –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–¥–∞, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ ---
        if not tnved and name:
            name_first_word = name.lower().split()[0]
            for item in invoice_data:
                if item["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"] and item["–ö–æ–¥ –¢–ù–í–≠–î"]:
                    if item["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"].lower().split()[0] == name_first_word:
                        tnved = item["–ö–æ–¥ –¢–ù–í–≠–î"]
                        break

        qty = pd.to_numeric(row.astype(str).str.replace(",", "."), errors="coerce").dropna()
        quantity = int(qty.iloc[0]) if not qty.empty else None
        cost = qty.iloc[-1] if len(qty) > 1 else None
        invoice_data.append({
            "‚Ññ –ø/–ø": len(invoice_data) + 1,
            "–ö–æ–¥ –¢–ù–í–≠–î": tnved if tnved else "",
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞": name,
            "–ö–æ–ª-–≤–æ": quantity,
            "–°—Ç–æ–∏–º–æ—Å—Ç—å": cost
        })

    df_invoice_clean = pd.DataFrame(invoice_data)

    # --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∫–ª–∞–¥–Ω–æ–π (–≤–µ—Å) ---
    waybill_data = []
    for _, row in df_waybill.iterrows():
        line = " ".join(str(v) for v in row if pd.notna(v))
        tnved = extract_tnved(line)
        if tnved:
            qty = pd.to_numeric(row.astype(str).str.replace(",", "."), errors="coerce").dropna()
            weight = qty.iloc[-1] if not qty.empty else None
            waybill_data.append({
                "–ö–æ–¥ –¢–ù–í–≠–î": tnved,
                "–í–µ—Å (–∫–≥)": weight
            })

    df_waybill_clean = pd.DataFrame(waybill_data)

    # --- –æ–±—ä–µ–¥–∏–Ω—è–µ–º ---
    df_summary = df_invoice_clean.merge(df_waybill_clean, on="–ö–æ–¥ –¢–ù–í–≠–î", how="left")

    # --- –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ ---
    totals = {
        "‚Ññ –ø/–ø": "–ò–¢–û–ì–û",
        "–ö–æ–¥ –¢–ù–í–≠–î": "",
        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞": "",
        "–ö–æ–ª-–≤–æ": df_summary["–ö–æ–ª-–≤–æ"].sum(skipna=True),
        "–°—Ç–æ–∏–º–æ—Å—Ç—å": df_summary["–°—Ç–æ–∏–º–æ—Å—Ç—å"].sum(skipna=True),
        "–í–µ—Å (–∫–≥)": df_summary["–í–µ—Å (–∫–≥)"].sum(skipna=True)
    }
    df_summary = pd.concat([df_summary, pd.DataFrame([totals])], ignore_index=True)

    return df_summary

@app.route("/", methods=["GET", "POST"])
def upload():
    global last_summary
    if request.method == "POST":
        invoice = request.files.get("invoice")
        waybill = request.files.get("waybill")
        if not invoice or not waybill:
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ —Ñ–∞–π–ª–∞"
        df_summary = make_summary(invoice, waybill)

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ
        last_summary = df_summary

        # HTML-—Ç–∞–±–ª–∏—Ü–∞ + –∫–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∞—Ç—å
        html_table = df_summary.to_html(index=False, classes="table table-striped table-bordered align-middle")
        return render_template_string(f"""
        <!doctype html>
        <html lang="ru">
        <head>
          <meta charset="utf-8">
          <title>–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞</title>
          <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
        </head>
        <body class="p-4">
          <div class="container">
            <h2 class="mb-4">–†–µ–∑—É–ª—å—Ç–∞—Ç</h2>
            <div class="table-responsive">
              {html_table}
            </div>
            <a href="/download" class="btn btn-success mt-3">üì• –°–∫–∞—á–∞—Ç—å Excel</a>
            <a href="/" class="btn btn-secondary mt-3">üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã</a>
          </div>
        </body>
        </html>
        """)

    return render_template_string(UPLOAD_FORM)

@app.route("/download")
def download():
    global last_summary
    if last_summary is None:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"
    output = BytesIO()
    last_summary.to_excel(output, index=False)
    output.seek(0)
    return send_file(output, as_attachment=True, download_name="summary.xlsx")

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
