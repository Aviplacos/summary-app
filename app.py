import os
import io
import re
import pandas as pd
import pdfplumber
from flask import Flask, request, render_template_string, send_file

app = Flask(__name__)

HTML_TEMPLATE = """
<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 40px; }
    table { border-collapse: collapse; width: 100%; }
    th, td { border: 1px solid #999; padding: 6px; text-align: left; }
    th { background: #eee; }
    .note { color: #666; font-size: 12px; }
  </style>
</head>
<body>
  <h2>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</h2>
  <form action="/" method="post" enctype="multipart/form-data">
    –£–ü–î (PDF): <input type="file" name="upd" accept="application/pdf"><br><br>
    –¢–û–†–ì-12 (PDF): <input type="file" name="torg" accept="application/pdf"><br><br>
    <input type="submit" value="–û–±—Ä–∞–±–æ—Ç–∞—Ç—å">
  </form>
  {% if table %}
    <h2>–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤</h2>
    {{ table|safe }}
    <p class="note">–û—Å–Ω–æ–≤–∞ ‚Äî –¢–û–†–ì-12: –≤—Å–µ –ø–æ–ª—è, –∫—Ä–æ–º–µ ¬´–ö–æ–¥ –≤–∏–¥–∞ —Ç–æ–≤–∞—Ä–∞¬ª, –≤–∑—è—Ç—ã –∏–∑ –Ω–∞–∫–ª–∞–¥–Ω–æ–π. –ö–æ–¥ –ø–æ–¥—Ç—è–Ω—É—Ç –∏–∑ –£–ü–î.</p>
    <br>
    <a href="/download">üì• –°–∫–∞—á–∞—Ç—å Excel</a>
  {% endif %}
</body>
</html>
"""

summary_df = None

# ---------- Helpers ----------

def safe_float(val):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫ float (—É—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–±–µ–ª—ã/–Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ, –∑–∞–ø—è—Ç—ã–µ)."""
    if val is None:
        return None
    if isinstance(val, (int, float)):
        return float(val)
    if isinstance(val, str):
        s = val.replace("\u00A0", " ").replace(" ", "").replace(",", ".")
        try:
            return float(s)
        except Exception:
            return None
    return None


def cleanup_text(x: str) -> str:
    if not x:
        return ""
    s = str(x).replace("\n", " ").replace("\u00A0", " ")
    s = re.sub(r"\s+", " ", s).strip()
    return s


def has_letters(s: str) -> bool:
    return bool(re.search(r"[A-Za-z–ê-–Ø–∞-—è–Å—ë]", s or ""))


def is_header_or_total(name: str) -> bool:
    n = (name or "").lower()
    return any(k in n for k in [
        "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "—Ç–æ–≤–∞—Ä", "–∏—Ç–æ–≥–æ", "–≤—Å–µ–≥–æ", "—Å—É–º–º–∞", "–∫ –æ–ø–ª–∞—Ç–µ", "–ø–æ —Å—á–µ—Ç—É"
    ])


def extract_10_digit_code(cell):
    """–ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ —è—á–µ–π–∫–∏ —Ä–æ–≤–Ω–æ 10 —Ü–∏—Ñ—Ä, –∏–Ω–∞—á–µ None."""
    if cell is None:
        return None
    digits = re.sub(r"\D", "", str(cell))
    return digits if len(digits) == 10 else None


def normalize_key(name: str) -> str:
    """–ö–ª—é—á –¥–ª—è —Å–∫–ª–µ–π–∫–∏: –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä + —Å—Ö–ª–æ–ø–Ω—É—Ç—ã–µ –ø—Ä–æ–±–µ–ª—ã + –±–µ–∑ –ª–∏—à–Ω–µ–π –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ –Ω–∞ –∫—Ä–∞—è—Ö."""
    s = cleanup_text(name).lower()
    s = re.sub(r"\s+", " ", s).strip(" ,.;:-")
    return s


def get_cell(row, idx):
    return row[idx] if (row is not None and isinstance(row, (list, tuple)) and 0 <= idx < len(row)) else None


def iter_rows(page):
    """–û–±—Ö–æ–¥–∏–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —É—Å—Ç–æ–π—á–∏–≤–æ –∫ —Ä–∞–∑—Ä—ã–≤–∞–º."""
    tables = page.extract_tables() or []
    if not tables:
        one = page.extract_table()
        if one:
            tables = [one]
    for t in tables:
        if not t:
            continue
        for row in t:
            yield row

# ---------- Parsing ----------

def parse_upd(file):
    """
    –£–ü–î: –Ω–∞–º –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –ø–∞—Ä—ã (–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ -> –ö–æ–¥ –≤–∏–¥–∞ —Ç–æ–≤–∞—Ä–∞).
    –ü–æ RAW —Ä–∞–Ω–µ–µ: name -> col 3, code -> col 4.
    –ö–æ–¥ –≤–∞–ª–∏–¥–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ 10 —Ü–∏—Ñ—Ä.
    """
    pairs = []
    with pdfplumber.open(file) as pdf:
        for page in pdf.pages:
            for row in iter_rows(page):
                if not row:
                    continue
                name = cleanup_text(get_cell(row, 3))
                if not name or not has_letters(name) or is_header_or_total(name):
                    continue
                code = extract_10_digit_code(get_cell(row, 4))
                if code:
                    pairs.append((normalize_key(name), code))

    if not pairs:
        return pd.DataFrame(columns=["__key__", "–ö–æ–¥ –≤–∏–¥–∞ —Ç–æ–≤–∞—Ä–∞"])

    # –ï—Å–ª–∏ –Ω–∞ –æ–¥–Ω–æ –∏–º—è –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–¥–æ–≤ ‚Äî –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π (–∫–∞–∫ ¬´—Å–∞–º—ã–π –Ω–∏–∂–Ω–∏–π¬ª –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ).
    df = pd.DataFrame(pairs, columns=["__key__", "–ö–æ–¥ –≤–∏–¥–∞ —Ç–æ–≤–∞—Ä–∞"])
    df = df.drop_duplicates(subset="__key__", keep="last")
    return df


def parse_torg(file):
    """
    –¢–û–†–ì-12: —ç—Ç–æ ¬´–∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã¬ª –ø–æ –ø–æ–∑–∏—Ü–∏—è–º.
    –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏:
      - –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ (–æ–±—ã—á–Ω–æ col 1; –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é —è—á–µ–π–∫—É —Å –±—É–∫–≤–∞–º–∏)
      - –ö–æ–ª-–≤–æ (–ø—ã—Ç–∞–µ–º—Å—è col 6; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –∏–º–µ–Ω–∏)
      - –°—Ç–æ–∏–º–æ—Å—Ç—å (–ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å ¬´—Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ¬ª —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫–µ, –∏—Å–∫–ª—é—á–∞—è –º–∞—Å—Å—É –∏ –∫–æ–¥)
      - –ú–∞—Å—Å–∞ –Ω–µ—Ç—Ç–æ (–ø—ã—Ç–∞–µ–º—Å—è col 9; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî None)
    –í–ê–ñ–ù–û: —Å—Ç—Ä–æ–∫–∏ –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–ª–∏–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏—è; —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —è–≤–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏/–∏—Ç–æ–≥–∏.
    –ü–æ—Ä—è–¥–æ–∫ —Å—Ç—Ä–æ–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –≤ –¢–û–†–ì-12.
    """
    rows = []
    with pdfplumber.open(file) as pdf:
        for page in pdf.pages:
            for row in iter_rows(page):
                if not row:
                    continue

                # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
                name = cleanup_text(get_cell(row, 1))
                if not has_letters(name):
                    # –∏—â–µ–º –ø–µ—Ä–≤—É—é —è—á–µ–π–∫—É —Å –±—É–∫–≤–∞–º–∏
                    for cell in row:
                        cand = cleanup_text(cell)
                        if has_letters(cand):
                            name = cand
                            break

                if not name or is_header_or_total(name):
                    continue  # —è–≤–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏/–∏—Ç–æ–≥–∏

                # –ú–∞—Å—Å–∞ (–ø–æ –æ–ø—ã—Ç—É ‚Äî col 9)
                weight = safe_float(get_cell(row, 9))

                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —á–∏—Å–ª–∞ –¥–ª—è —ç–≤—Ä–∏—Å—Ç–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞/—Å—Ç–æ–∏–º–æ—Å—Ç–∏
                numbers = []
                for i, cell in enumerate(row):
                    # –∏—Å–∫–ª—é—á–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é —è—á–µ–π–∫—É –∫–æ–¥–∞ –≤–∏–¥–∞ (index 4) ‚Äî —Ç–∞–º 10 —Ü–∏—Ñ—Ä —Å–∫–ª–µ–µ–Ω–Ω—ã—Ö,
                    # –∏ –æ–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø–æ–ø–∞–¥–∞—Ç—å –∫–∞–∫ —á–∏—Å–ª–æ
                    if i == 4:
                        continue
                    num = safe_float(cell)
                    if num is not None:
                        numbers.append((i, num))

                # –ö–æ–ª-–≤–æ: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º col 6, –∏–Ω–∞—á–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –ü–û–°–õ–ï –∏–º–µ–Ω–∏
                qty = safe_float(get_cell(row, 6))
                if qty is None:
                    # –æ–ø—Ä–µ–¥–µ–ª–∏–º –∏–Ω–¥–µ–∫—Å —è—á–µ–π–∫–∏ –∏–º–µ–Ω–∏
                    name_idx = None
                    for i, cell in enumerate(row):
                        if cleanup_text(cell) == name:
                            name_idx = i
                            break
                    # –±–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –∏–º–µ–Ω–∏
                    for i, num in numbers:
                        if name_idx is None or i > name_idx:
                            qty = num
                            break

                # –°—Ç–æ–∏–º–æ—Å—Ç—å: –µ—Å–ª–∏ –µ—Å—Ç—å —á–∏—Å–ª–∞ ‚Äî –±–µ—Ä—ë–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ (–æ–±—ã—á–Ω–æ ¬´–°—É–º–º–∞¬ª > ¬´–¶–µ–Ω–∞¬ª)
                cost = None
                if numbers:
                    # –µ—Å–ª–∏ –≤–µ—Å —Å—á–∏—Ç–∞–ª—Å—è (col 9), –∏—Å–∫–ª—é—á–∏–º –µ–≥–æ –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å
                    candidates = [(i, n) for i, n in numbers if not (i == 9 and weight is not None and n == weight)]
                    if candidates:
                        cost = max(candidates, key=lambda x: x[1])[1]

                rows.append([name, qty, cost, weight])

    # –î–∞–∂–µ –µ—Å–ª–∏ qty/cost/weight –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã ‚Äî —Å—Ç—Ä–æ–∫—É –æ—Å—Ç–∞–≤–ª—è–µ–º (—Å None)
    df = pd.DataFrame(rows, columns=["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ö–æ–ª-–≤–æ", "–°—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)", "–ú–∞—Å—Å–∞ –Ω–µ—Ç—Ç–æ (–∫–≥)"])
    # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è —Å–∫–ª–µ–π–∫–∏ —Å –£–ü–î
    df["__key__"] = df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"].apply(normalize_key)
    return df


def build_summary(torg_df, upd_codes_df):
    """
    –§–∏–Ω–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: –æ—Å–Ω–æ–≤–∞–Ω–∞ –¢–û–õ–¨–ö–û –Ω–∞ —Å—Ç—Ä–æ–∫–∞—Ö –¢–û–†–ì-12.
    –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–¥—ã –∏–∑ –£–ü–î –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –∏–º–µ–Ω–∏.
    –ö–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ == –∫–æ–ª-–≤—É —Å—Ç—Ä–æ–∫ –¢–û–†–ì-12 (–ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤/–∏—Ç–æ–≥–æ–≤).
    """
    df = pd.merge(
        torg_df,
        upd_codes_df[["__key__", "–ö–æ–¥ –≤–∏–¥–∞ —Ç–æ–≤–∞—Ä–∞"]] if not upd_codes_df.empty else pd.DataFrame(columns=["__key__", "–ö–æ–¥ –≤–∏–¥–∞ —Ç–æ–≤–∞—Ä–∞"]),
        on="__key__",
        how="left"
    )

    # –ï—Å–ª–∏ –∫–æ–¥–∞ –Ω–µ—Ç ‚Äî —Å—Ç–∞–≤–∏–º "‚Äî"
    df["–ö–æ–¥ –≤–∏–¥–∞ —Ç–æ–≤–∞—Ä–∞"] = df["–ö–æ–¥ –≤–∏–¥–∞ —Ç–æ–≤–∞—Ä–∞"].fillna("‚Äî")

    # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–º –∫–æ–ª–æ–Ω–∫–∏ –∏ –¥–æ–±–∞–≤–∏–º –Ω—É–º–µ—Ä–∞—Ü–∏—é
    df = df[["–ö–æ–¥ –≤–∏–¥–∞ —Ç–æ–≤–∞—Ä–∞", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ö–æ–ª-–≤–æ", "–°—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)", "–ú–∞—Å—Å–∞ –Ω–µ—Ç—Ç–æ (–∫–≥)"]]
    df.insert(0, "‚Ññ", range(1, len(df) + 1))

    # –ò—Ç–æ–≥–∏
    total_qty = df["–ö–æ–ª-–≤–æ"].sum(skipna=True)
    total_cost = df["–°—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)"].sum(skipna=True)
    total_mass = df["–ú–∞—Å—Å–∞ –Ω–µ—Ç—Ç–æ (–∫–≥)"].sum(skipna=True)
    df.loc[len(df)] = ["‚Äî", "–ò–¢–û–ì–û", "-", total_qty, total_cost, total_mass]

    return df

# ---------- Web ----------

@app.route("/", methods=["GET", "POST"])
def index():
    global summary_df
    table_html = None

    if request.method == "POST":
        upd_file = request.files.get("upd")
        torg_file = request.files.get("torg")

        if not upd_file or not torg_file:
            return render_template_string(HTML_TEMPLATE, table="<p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ PDF —Ñ–∞–π–ª–∞ (–£–ü–î –∏ –¢–û–†–ì-12).</p>")

        upd_codes_df = parse_upd(upd_file)
        torg_df = parse_torg(torg_file)

        if torg_df.empty:
            table_html = "<p>–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –¢–û–†–ì-12.</p>"
        else:
            summary_df = build_summary(torg_df, upd_codes_df)
            table_html = summary_df.to_html(index=False, float_format="%.2f")

    return render_template_string(HTML_TEMPLATE, table=table_html)


@app.route("/download")
def download():
    global summary_df
    if summary_df is None or summary_df.empty:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã."
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine="openpyxl") as writer:
        summary_df.to_excel(writer, index=False, sheet_name="–°–≤–æ–¥–Ω–∞—è")
    output.seek(0)
    return send_file(output, download_name="summary.xlsx", as_attachment=True)


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
