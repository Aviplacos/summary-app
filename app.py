import os
import io
import re
import pandas as pd
import pdfplumber
from flask import Flask, request, render_template_string, send_file

app = Flask(__name__)

HTML_TEMPLATE = """
<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 40px; }
    table { border-collapse: collapse; width: 100%; }
    th, td { border: 1px solid #999; padding: 6px; text-align: left; }
    th { background: #eee; }
  </style>
</head>
<body>
  <h2>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</h2>
  <form action="/" method="post" enctype="multipart/form-data">
    –£–ü–î (PDF): <input type="file" name="upd" accept="application/pdf"><br><br>
    –¢–û–†–ì-12 (PDF): <input type="file" name="torg" accept="application/pdf"><br><br>
    <input type="submit" value="–û–±—Ä–∞–±–æ—Ç–∞—Ç—å">
  </form>
  {% if table %}
    <h2>–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤</h2>
    {{ table|safe }}
    <br>
    <a href="/download">üì• –°–∫–∞—á–∞—Ç—å Excel</a>
  {% endif %}
</body>
</html>
"""

summary_df = None

# ---------------- helpers ----------------

def safe_float(val):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫ float (—É—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, –∑–∞–ø—è—Ç—ã–µ)."""
    if val is None:
        return None
    if isinstance(val, (int, float)):
        return float(val)
    if isinstance(val, str):
        s = val.replace("\u00A0", " ").replace(" ", "").replace(",", ".")
        try:
            return float(s)
        except Exception:
            return None
    return None


def extract_10_digit_code(cell):
    """–ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ —è—á–µ–π–∫–∏ 10-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã). –ï—Å–ª–∏ –Ω–µ 10 —Ü–∏—Ñ—Ä ‚Äî None."""
    if cell is None:
        return None
    digits = re.sub(r"\D", "", str(cell))
    return digits if len(digits) == 10 else None


def cleanup_text(x: str) -> str:
    if not x:
        return ""
    s = str(x).replace("\n", " ").replace("\u00A0", " ")
    s = re.sub(r"\s+", " ", s).strip()
    return s


def has_letters(s: str) -> bool:
    return bool(re.search(r"[A-Za-z–ê-–Ø–∞-—è–Å—ë]", s or ""))


def word_count(s: str) -> int:
    if not s:
        return 0
    # –°—á–∏—Ç–∞–µ–º —Å–ª–æ–≤–∞ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±—É–∫–≤/—Ü–∏—Ñ—Ä –¥–ª–∏–Ω–æ–π >=1
    tokens = re.findall(r"[A-Za-z–ê-–Ø–∞-—è–Å—ë0-9]+", s)
    return len(tokens)


def is_total_row(name: str) -> bool:
    n = (name or "").lower()
    return any(k in n for k in ["–∏—Ç–æ–≥–æ", "–≤—Å–µ–≥–æ", "—Å—É–º–º–∞", "–∫ –æ–ø–ª–∞—Ç–µ"])


def get_cell(row, idx):
    return row[idx] if (row is not None and isinstance(row, (list, tuple)) and 0 <= idx < len(row)) else None


def normalize_key(name: str) -> str:
    """–ö–ª—é—á –¥–ª—è —Å–∫–ª–µ–π–∫–∏: –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä + —Å—Ö–ª–æ–ø–Ω—É—Ç—ã–µ –ø—Ä–æ–±–µ–ª—ã."""
    s = cleanup_text(name).lower()
    s = re.sub(r"\s+", " ", s)
    return s

# ---------------- parsers ----------------

def iter_rows(page):
    """–ê–∫–∫—É—Ä–∞—Ç–Ω–æ –æ–±—Ö–æ–¥–∏–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ."""
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü
    tables = page.extract_tables() or []
    if not tables:
        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äì –æ–¥–∏–Ω–æ—á–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
        one = page.extract_table()
        if one:
            tables = [one]
    for t in tables:
        if not t:
            continue
        for row in t:
            yield row


def parse_upd(file):
    """
    –£–ü–î –ø–æ RAW:
      name -> col 3, code -> col 4, qty -> col 7, cost -> col 9.
    –ü—Ä–∞–≤–∏–ª–∞:
      - –ö–æ–¥ —Ç–æ–ª—å–∫–æ –∏–∑ col 4, —Å—Ç—Ä–æ–≥–æ 10 —Ü–∏—Ñ—Ä, –∏–Ω–∞—á–µ '‚Äî' (—Å—Ç—Ä–æ–∫—É –Ω–µ –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º).
      - –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å > 2 —Å–ª–æ–≤.
    """
    rows = []
    with pdfplumber.open(file) as pdf:
        for page in pdf.pages:
            for row in iter_rows(page):
                if not row:
                    continue

                raw_name = cleanup_text(get_cell(row, 3))
                raw_code = get_cell(row, 4)

                # –ö–æ–¥
                code = extract_10_digit_code(raw_code) or "‚Äî"

                # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: –µ—Å–ª–∏ –≤ col 3 —Å–ª–æ–≤ <= 2, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É –≤ —Å—Ç—Ä–æ–∫–µ
                name = raw_name
                if word_count(name) <= 2 or not has_letters(name):
                    for cell in row:
                        cand = cleanup_text(cell)
                        if has_letters(cand) and word_count(cand) > 2:
                            name = cand
                            break

                # –§–∏–ª—å—Ç—Ä—ã –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é
                if not name or word_count(name) <= 2 or is_total_row(name):
                    continue

                qty = safe_float(get_cell(row, 7))
                cost = safe_float(get_cell(row, 9))
                if qty is None or cost is None:
                    continue

                rows.append([code, name, qty, cost])

    df = pd.DataFrame(rows, columns=["–ö–æ–¥ –≤–∏–¥–∞ —Ç–æ–≤–∞—Ä–∞", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ö–æ–ª-–≤–æ", "–°—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)"])
    if not df.empty:
        df["__key__"] = df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"].apply(normalize_key)
    return df


def parse_torg(file):
    """
    –¢–û–†–ì-12 –ø–æ RAW:
      name -> col 1, mass -> col 9.
    –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–∞–∫–∂–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å > 2 —Å–ª–æ–≤.
    """
    rows = []
    with pdfplumber.open(file) as pdf:
        for page in pdf.pages:
            for row in iter_rows(page):
                if not row:
                    continue
                name = cleanup_text(get_cell(row, 1))
                if not name or word_count(name) <= 2 or is_total_row(name):
                    continue
                mass = safe_float(get_cell(row, 9))
                if mass is None:
                    continue
                rows.append([name, mass])

    df = pd.DataFrame(rows, columns=["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ú–∞—Å—Å–∞ –Ω–µ—Ç—Ç–æ (–∫–≥)"])
    if not df.empty:
        df["__key__"] = df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"].apply(normalize_key)
    return df

# ---------------- summary ----------------

def build_summary(upd_df, torg_df):
    if upd_df.empty:
        return upd_df

    # –°–ª–µ–π–∫–∞ –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –∫–ª—é—á—É (–æ—Å—Ç–∞–≤–ª—è–µ–º –∏–º–µ–Ω–∞ –∏–∑ –£–ü–î)
    df = pd.merge(
        upd_df,
        torg_df[["__key__", "–ú–∞—Å—Å–∞ –Ω–µ—Ç—Ç–æ (–∫–≥)"]],
        on="__key__",
        how="left",
        suffixes=("", "_t")
    )
    df.drop(columns=["__key__"], inplace=True)

    # –ù—É–º–µ—Ä–∞—Ü–∏—è
    df.insert(0, "‚Ññ", range(1, len(df) + 1))

    # –ò–¢–û–ì–û
    total_qty = df["–ö–æ–ª-–≤–æ"].sum(skipna=True)
    total_cost = df["–°—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)"].sum(skipna=True)
    total_mass = df["–ú–∞—Å—Å–∞ –Ω–µ—Ç—Ç–æ (–∫–≥)"].sum(skipna=True)

    # –ü–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ —É–∂–µ: ‚Ññ, –ö–æ–¥, –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, –ö–æ–ª-–≤–æ, –°—Ç–æ–∏–º–æ—Å—Ç—å, –ú–∞—Å—Å–∞
    df.loc[len(df)] = ["‚Äî", "‚Äî", "–ò–¢–û–ì–û", total_qty, total_cost, total_mass]
    return df

# ---------------- web ----------------

@app.route("/", methods=["GET", "POST"])
def index():
    global summary_df
    table_html = None
    if request.method == "POST":
        upd_file = request.files.get("upd")
        torg_file = request.files.get("torg")

        if not upd_file or not torg_file:
            return render_template_string(HTML_TEMPLATE, table="<p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ PDF.</p>")

        upd_df = parse_upd(upd_file)
        torg_df = parse_torg(torg_file)

        if upd_df.empty:
            table_html = "<p>–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—Ç—Ä–æ–∫–∏ –£–ü–î –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º.</p>"
        else:
            summary_df = build_summary(upd_df, torg_df)
            table_html = summary_df.to_html(index=False, float_format="%.2f")

    return render_template_string(HTML_TEMPLATE, table=table_html)


@app.route("/download")
def download():
    global summary_df
    if summary_df is None or summary_df.empty:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã."
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine="openpyxl") as writer:
        summary_df.to_excel(writer, index=False, sheet_name="–°–≤–æ–¥–Ω–∞—è")
    output.seek(0)
    return send_file(output, download_name="summary.xlsx", as_attachment=True)


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
